// Generated by gencpp from file test_ros_service/sampleServiceRequest.msg
// DO NOT EDIT!


#ifndef TEST_ROS_SERVICE_MESSAGE_SAMPLESERVICEREQUEST_H
#define TEST_ROS_SERVICE_MESSAGE_SAMPLESERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_ros_service
{
template <class ContainerAllocator>
struct sampleServiceRequest_
{
  typedef sampleServiceRequest_<ContainerAllocator> Type;

  sampleServiceRequest_()
    : one_or_zero(0)  {
    }
  sampleServiceRequest_(const ContainerAllocator& _alloc)
    : one_or_zero(0)  {
  (void)_alloc;
    }



   typedef int32_t _one_or_zero_type;
  _one_or_zero_type one_or_zero;





  typedef boost::shared_ptr< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct sampleServiceRequest_

typedef ::test_ros_service::sampleServiceRequest_<std::allocator<void> > sampleServiceRequest;

typedef boost::shared_ptr< ::test_ros_service::sampleServiceRequest > sampleServiceRequestPtr;
typedef boost::shared_ptr< ::test_ros_service::sampleServiceRequest const> sampleServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_ros_service::sampleServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_ros_service::sampleServiceRequest_<ContainerAllocator1> & lhs, const ::test_ros_service::sampleServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.one_or_zero == rhs.one_or_zero;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_ros_service::sampleServiceRequest_<ContainerAllocator1> & lhs, const ::test_ros_service::sampleServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_ros_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9caceb3fd8f6897b7495d54cd55dee3e";
  }

  static const char* value(const ::test_ros_service::sampleServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9caceb3fd8f6897bULL;
  static const uint64_t static_value2 = 0x7495d54cd55dee3eULL;
};

template<class ContainerAllocator>
struct DataType< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_ros_service/sampleServiceRequest";
  }

  static const char* value(const ::test_ros_service::sampleServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 one_or_zero\n"
;
  }

  static const char* value(const ::test_ros_service::sampleServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.one_or_zero);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sampleServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_ros_service::sampleServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_ros_service::sampleServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "one_or_zero: ";
    Printer<int32_t>::stream(s, indent + "  ", v.one_or_zero);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_ROS_SERVICE_MESSAGE_SAMPLESERVICEREQUEST_H
