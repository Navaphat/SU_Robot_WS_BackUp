// Generated by gencpp from file homework_ws/CounterGoal.msg
// DO NOT EDIT!


#ifndef HOMEWORK_WS_MESSAGE_COUNTERGOAL_H
#define HOMEWORK_WS_MESSAGE_COUNTERGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace homework_ws
{
template <class ContainerAllocator>
struct CounterGoal_
{
  typedef CounterGoal_<ContainerAllocator> Type;

  CounterGoal_()
    : num_counts(0)  {
    }
  CounterGoal_(const ContainerAllocator& _alloc)
    : num_counts(0)  {
  (void)_alloc;
    }



   typedef uint32_t _num_counts_type;
  _num_counts_type num_counts;





  typedef boost::shared_ptr< ::homework_ws::CounterGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::homework_ws::CounterGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CounterGoal_

typedef ::homework_ws::CounterGoal_<std::allocator<void> > CounterGoal;

typedef boost::shared_ptr< ::homework_ws::CounterGoal > CounterGoalPtr;
typedef boost::shared_ptr< ::homework_ws::CounterGoal const> CounterGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::homework_ws::CounterGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::homework_ws::CounterGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::homework_ws::CounterGoal_<ContainerAllocator1> & lhs, const ::homework_ws::CounterGoal_<ContainerAllocator2> & rhs)
{
  return lhs.num_counts == rhs.num_counts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::homework_ws::CounterGoal_<ContainerAllocator1> & lhs, const ::homework_ws::CounterGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace homework_ws

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::homework_ws::CounterGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::homework_ws::CounterGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::homework_ws::CounterGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::homework_ws::CounterGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::homework_ws::CounterGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::homework_ws::CounterGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::homework_ws::CounterGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42f5ddfe2ee41298918bff5bf724cca8";
  }

  static const char* value(const ::homework_ws::CounterGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42f5ddfe2ee41298ULL;
  static const uint64_t static_value2 = 0x918bff5bf724cca8ULL;
};

template<class ContainerAllocator>
struct DataType< ::homework_ws::CounterGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "homework_ws/CounterGoal";
  }

  static const char* value(const ::homework_ws::CounterGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::homework_ws::CounterGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint32 num_counts\n"
;
  }

  static const char* value(const ::homework_ws::CounterGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::homework_ws::CounterGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_counts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CounterGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::homework_ws::CounterGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::homework_ws::CounterGoal_<ContainerAllocator>& v)
  {
    s << indent << "num_counts: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_counts);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOMEWORK_WS_MESSAGE_COUNTERGOAL_H
